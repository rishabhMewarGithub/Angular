

-----------------------------

---angular: getting started

Introduction
Introduction
Anatomy of an Angular Application
Get the Most from This Course
Sample Application
Course Outline

First Things First
Introduction
Selecting a Language
Selecting an Editor
Setting up Our Environment
Setting up an Angular Application
Installing an Angular Application
Running an Angular Application
About Modules
Summary

Introduction to Components
Introduction
What Is a Component?
Creating the Component Class
Defining the Metadata with a Decorator
Importing What We Need
Demo: Creating the App Component
Bootstrapping Our App Component
Demo: Bootstrapping Our App Component
Checklists and Summary

Templates, Interpolation, and Directives
Introduction
Building a Template
Building the Component
Using a Component as a Directive
Binding with Interpolation
Adding Logic with Directives: ngIf
Adding Logic with Directives: ngFor
Checklists and Summary

Data Binding & Pipes
Introduction
Property Binding
Handling Events with Event Binding
Handling Input with Two-way Binding
Transforming Data with Pipes
Checklists and Summary

More on Components
Introduction
Defining Interfaces
Encapsulating Component Styles
Using Lifecycle Hooks
Building Custom Pipes
Filtering a List
Checklists and Summary

Building Nested Components
Introduction
Building a Nested Component
Using a Nested Component
Passing Data to a Nested Component Using @Input
Passing Data from a Component Using @Output
Checklists and Summary

Services and Dependency Injection
Introduction
How Does It Work?
Building a Service
Registering the Service
Injecting the Service
Checklists and Summary

Retrieving Data Using HTTP
Introduction
Observables and Reactive Extensions
Sending an HTTP Request
Demo: Sending an Http Request
Exception Handling
Subscribing to an Observable
Demo: Subscribing to an Observable
Checklists and Summary

Navigation and Routing Basics
Introduction
Generating Code and Handling Undefined
How Routing Works
Configuring Routes
Demo: Configuring Routes
Tying Routes to Actions
Placing the Views
Checklists and Summary

Navigation and Routing Additional Techniques
Introduction
Passing Parameters to a Route
Demo: Passing Parameters to a Route
Activating a Route with Code
Protecting Routes with Guards
Demo: Protecting Routes with Guards
Checklists and Summary

Angular Modules
Introduction
What Is an Angular Module?
Bootstrap Array
Declarations Array
Exports Array
Imports Array
Providers Array
Feature Modules
Demo: Feature Modules
Shared Module
Revisiting AppModule
Checklists and Summary

Building, Testing, and Deploying with the CLI
Introduction
Angular CLI Overview
ng new
ng serve
ng generate
ng test
ng build
Checklists and Summary

Final Words
Introduction
Recapping Our Journey
Learning More
What Is Angular? (Revisited)
Closing

-----------------------------

---angular forms

Introduction
Introduction and Course Overview
Angular's Form Technologies
Creating the Demo Application

Form Basics in Angular
Introduction
Angular's FormsModule
Creating a Form Component
Using Bootstrap for Styling
Checkboxes and Radios
Select and Options
Other Form Controls
Summary

Data Binding in Angular Forms
Introduction
Using NgForm
NgModel
Creating a Data Model
Two-way Data Binding
Copying Form Data
Summary

Form Validation
Introduction
HTML5 Field Validation
CSS Classes for Validation
NgModel Properties for Validation
Styling Forms with Validation Errors
Submitting Forms
Handling Form Control Events
Summary

HTTP Form Posting and Data Access
Introduction
Creating a Data Service
Form Posting Using Observables
HTTP Access Using HttpClient
Posting a Form
Handling POST Errors
Retrieving Data for Select Elements
Summary

Third-party Form Controls
Introduction
Form Resources at angular.io
Installing and Using ngx-bootstrap
Working with Buttons
Dates and Date Ranges
Timepicker
Rating Control
Summary

-----------------------------

---angular cli

Overview
Introduction
Motivation
Sneak Peek Inside the Angular CLI
Test Driving the Angular CLI
Looking Ahead

Angular CLI Setup and Verification
Getting Started with the Angular CLI
Angular CLI Requirements
Installing and Verifying the Angular CLI
Angular CLI Installation
Generating and Exploring a New App
Angular Extensions for VS Code
Angular CLI Resources

Generating a New Angular Application
Overview
Commands for Generating a New App
Generating and Customizing a New App
Angular CLI JSON File
Common App Generation Flags
Configuring the Angular CLI
Linting
What's Next

Generating Code from Blueprints
Angular CLI Code Generation
Blueprints
Component Blueprints and Options
Generating Components
Declaring a Component in an NgModule
Generating Directives
Generating Services
Generating Classes, Interfaces, and Enums
Generating Pipes
Generating NgModules
Configuration and Resources for Out-of-the-Box Blueprints

Generating Routing Features
Generating Routing Features
The NgModule Blueprint with Routing
Generating a New Routing App
Generating a New Module with Routing
Generating a Guard
What's Next

Building and Serving
Building and Serving
Building Angular
Exploring a Development Build and Its Bundles
Building Target and Environments
Production Builds
Serving Angular
Exploring Angular Serving Options
Adding New Capabilities
Adding Angular Material
Adding Scripts, Styles, and Assets
What's Next

Running Unit and End to End Tests
Running Tests with the Angular CLI
Testing Angular
Executing Unit Tests
CLI Testing Options
Code Coverage
Debugging Unit Tests
End to End Tests
Executing End to End Tests
Wrap Up

Tooling Features
Tooling Features
Updating Angular
Running ng update
Updating Our Demo
Multiple Projects
Workspaces
Generating Libraries
Creating a Logger Library
Adding to Angular
Angular Console
Wrap Up

-----------------------------

---angular fundamentals

Getting Started with Angular
Introduction
Practice Exercises
Introduction to TypeScript
Comparing Angular to AngularJS
A Conceptual Overview of Angular
Here's What We'll Be Building
Installing Git and Node
Getting Started with the Angular CLI
Bootstrapping an Angular App
A Brief Look at the App Module
Accessing Static Files
Summary

Creating and Communicating Between Angular Components
Introduction
Creating Your First Data-bound Component
Using External Templates
Communicating with Child Components Using @Input
Communicating with Parent Components Using @Output
Using Template Variables to Interact with Child Components
Styling Components
Exploring Angular's CSS Encapsulation
Adding a Site Header
Summary

Exploring the Angular Template Syntax
Introduction
Interpolation, Property Bindings, and Expressions
Event Bindings and Statements
Repeating Data with ngFor
Handling Null Values with the Safe-Navigation Operator
Hiding and Showing Content with ngIf
Hiding Content with the [Hidden] Binding
Hiding and Showing Content with ngSwitch
Styling Components with ngClass
Styling Components with ngStyle
Summary

Creating Reusable Angular Services
Introduction
Why We Need Services and Dependency Injection
Creating Your First Service
Wrapping Third Party Services
Summary

Routing and Navigating Pages
Introduction
Adding Multiple Pages to Your App
Adding Your First Route
Accessing Route Parameters
Linking to Routes
Navigating from Code
Guarding Against Route Activation
Guarding Against Route De-activation
Pre-loading Data for Components
Styling Active Links
Lazily Loading Feature Modules
Organizing Your Exports with Barrels
Summary

Collecting Data with Angular Forms and Validation
Introduction
Using Models for Type Safety
Creating Your First Template-based Form
Using the Data from Your Template-based Form
Validating Template-based Forms
Creating Your First Reactive Form
Validating Reactive Forms
Using Multiple Validators in Reactive Forms
Diving Deeper into Template-based Forms
Editing Data with Two-way Bindings
Diving Deeper into Reactive Forms
Creating Custom Validators
Summary

Communicating Between Components
Introduction
Passing Data into a Child Component
Passing Data out of a Child Component
Summary

Reusing Components with Content Projection
Introduction
Content Projection
Multiple Slot Content Projection
Summary

Displaying Data with Pipes
Introduction
Using Built-in Pipes
Creating a Custom Pipe
Sorting and Filtering Overview
Creating a Filtering Display
Filtering Data
Sorting Data
Summary

Understanding Angular's Dependency Injection
Introduction
Using Third Party Global Services - The Problem
Angular Dependency Injection Lookup
Using Angular's InjectionToken
Using Angular's @Inject Decorator
The useClass Provider
The useExisting and useFactory Providers
Summary

Creating Directives and Advanced Components in Angular
Introduction
Implementing the Session Search
Adding jQuery
Creating a Modal Component
Fixing Template Parse Errors
Creating Directives - The Trigger Directive
Binding an ID
Routing to the Same Component
Using the @ViewChild Decorator
Creating Settings on Components
Summary

More Components and Custom Validators
Introduction
Creating a Voting Component
Adding Voting Functionality
Hiding Functionality Before Authentication
Using @Input Setters
Creating a Custom Validator
Adding a Validator to Angular's Validators
Implementing a Multi-field Validator
Summary

Communicating with the Server Using HTTP, Observables, and Rx
Introduction
Preparing to Store Data on the Server
Moving Data Storage to the Server
Listening to Resolved Data Changes
Using POST and PUT
Using QueryString Parameters
Using DELETE
Integrating Authentication with the Server
Persisting Authentication Status Across Page Refreshes
Saving User Data to the Server
Implementing Logout
Summary

Unit Testing Your Angular Code
Introduction
Installing Karma
Unit Testing Services
Testing Mock Calls
Testing Components with Isolated Tests
Summary

Testing Angular Components with Integrated Tests
Introduction
Setting up for Integrated Tests
Testing Components with Deep Integrated Tests
Creating Mock Services
Using DebugElement
Testing Components with Shallow Integrated Tests
Summary

Taking an Angular App to Production
Introduction
Linting Overview
Installing TSLint in VSCode
Using TSLint with VSCode
Linting from the Command Line
Going to Production - Overview
Angular's Ahead of Time Compiler
Creating your First Build
Basic Deployment
Demo: Serving up a Build
Build Flags
The Effects of Prod Mode
Optimistic Bundle Downloading
Summary

-----------------------------

---angular routing

Introduction
Introduction
Sample Application: Demo
Sample Application: Architecture
How Routing Works
Get the Most from This Course
Course Outline

Routing Basics
Introduction
Setting up Routing
Defining the Base Path
Importing the Angular Router
Configuring Application Routes
Placing the Template
Activating Routes
Using HTML 5 or Hash-based URLs
Checklist and Summary

Routing to Features
Introduction
Setting up for Feature Routing
Route Path Naming Strategies
Activating a Route with Code
Activating a Route with Code: Demo
Accessing Feature Routes
Defining a Routing Module
Checklists and Summary

Route Parameters
Introduction
Configuring a Parameterized Route
Populating Route Parameters
Populating Route Parameters: Demo
Reading Route Parameters: Snapshot
Reading Route Parameters: Snapshot Demo
Reading Route Parameters: Observable
Defining Optional Route Parameters
Defining Query Parameters
Reading Query Parameters
Checklists and Summary

Pre-fetching Data Using Route Resolvers
Introduction
Providing Data with a Route
Using a Route Resolver
Building a Route Resolver Service
Resolver Error Handling
Adding a Resolver to a Route Configuration
Reading Resolver Data - Snapshot
Reading Resolver Data - Observable
Checklists and Summary

Child Routes
Introduction
Using Child Routes
Configuring Child Routes
Placing the Child View
Activating Child Routes
Obtaining Data for Child Routes
Validating Across Child Routes
Checklists and Summary

Grouping and Component-less Routes
Introduction
Grouping Routes
Component-less Routes
Checklists and Summary

Styling, Animating, and Watching Routes
Introduction
Styling the Selected Route
Animating Route Transitions
Watching Routing Events
Reacting to Routing Events
Checklists and Summary

Secondary Routes
Introduction
Using Secondary Routes
Defining a Named Router Outlet
Configuring Secondary Routes
Activating Secondary Routes: RouterLink
Activating Secondary Routes: In Code
Clearing Secondary Outlets
Checklists and Summary

Route Guards
Introduction
Using Route Guards
CanActivate Guard
Sharing Data with a Guard
CanActivateChild Guard
CanDeactivate Guard
Checklists and Summary

Lazy Loading
Introduction
Building and Serving Our Files
Preparing for Lazy Loading
Lazy Loading
CanLoad Guard
Preloading Feature Modules
Preloading Feature Modules: Demo
Custom Preloading Strategy
Checklists and Summary

Final Words
Introduction
Recapping Our Journey
Learning More
Closing

-----------------------------

---securing angular apps with openid connect and oauth2

Angular App Security Big Picture
Introduction
Security Design Considerations
Client vs. Server Security
Angular App Security Architecture
Authentication and Authorization
Terminology
OpenID Connect and OAuth 2 Protocols
Identity Provider Options
Client Library Options
A Tour through the Demo Application

Authenticating with OpenID Connect
Introduction
Choosing OpenID Connect
Understanding OpenID Connect JWT Tokens
Choosing Your OpenID Connect Protocol Flow
Using Authorization Code Flow with PKCE
A Word About oidc-client Library
A Quick Review of the Client Functionality
Getting the Client Code Running on Your Machine
Getting the Server-side Code Running on Your Machine
Adding oidc-client and an Auth Service Component
Configuring oidc-client to Connect to Your STS
Adding Login to the App
Logging into the STS
Adding the Post-login Callback Page
Handling Login Status and Logging Out
Debugging Client Configuration Errors
Inspecting the JWT Tokens
A Word About User Registration
Summary

Connecting to a Different OpenID Connect Provider
Introduction
Integrating with Other OIDC Providers
Configuring Client Apps, APIs, and Users in Auth0
Changing the Client Configuration to Connect with Auth0
Resolving Differences in STS Configuration
Summary

Authorizing Calls to Your Backend APIs with OAuth 2
Introduction
OAuth 2 Terminology/Roles
OAuth 2 Grant Types
Understanding OAuth 2 Tokenss
Requiring Consent
Requiring Authentication at the API Server
Passing Access Tokens in API Calls Manually
Using an Authentication Interceptor to Pass Tokens
Filtering Data Based on Claims
Enforcing Access Control Based on Claims
Handling Authorization Errors in the Client App
Using Role or Custom Claims for Filtering and Access Control
Summary

Enhancing the Security User Experience
Introduction
Revisiting Token Management
Token Expiration Review
Enabling Silent Renew of Access Tokens
Providing a Security Context to the Client
Managing User Experience Based on the Security Context
Preventing Unauthorized Access to Views with Route Guards
Single Sign-on from Another Client App
Summary

-----------------------------

---unit testing in angular

Course Introduction
Course Introduction
The Demo Application
Testing Overview
Mocking
Unit Tests in Angular
Tools of Unit Testing with Angular
Installing and Running the Demo
Writing Your First Unit Test
Running Your Unit Tests
Writing Good Unit Tests
Summary

Isolated Unit Tests
Introduction
Testing a Pipe
Testing a Service
Testing a Component
Mocking to Isolate Code
Testing Interactions
Summary

Shallow Integration Tests
Introduction
Debugging Techniques with Angular and Karma
The TestBed
Using NO_ERRORS_SCHEMA
Testing Rendered HTML
NativeElement vs. DebugElement
More Complex Shallow Integration Tests
Mocking an Injected Service
Mocking Child Components
Dealing with Lists of Elements
Summary

Deep Integration Tests
Introduction
Creating a Deep Integration Test
Finding Elements by Directive
Integration Testing of Services
Implementing a Test with Mocked HTTP
Summary

Testing DOM Interaction and Routing Components
Introduction
Triggering Events on Elements
Emitting Events from Children
Raising Events on Child Directives
Interacting with Input Boxes
Testing with ActivatedRoute
Dealing with ngModel
Mocking the RouterLink
Testing the RouterLink
Summary

Advanced Topics
Introduction
Adding Async Code
Basic Async Testing
Using the fakeAsync Helper Function
Using the async Helper Function
Code Coverage
Summary
Course Summary

-----------------------------

---angular reactive forms

Introduction
Introduction
Angular Forms
Get the Most from This Course
Demo Form and Sample Application
Course Outline

Template-driven vs. Reactive Forms
Introduction
Form Building Blocks
Form Directives
Template Syntax for Forms
Template-driven Form
Template-driven Form: Template
Template-driven Form: Component
Complex Scenarios
Summary

Building a Reactive Form
Introduction
The Component Class
The Component Class: Demo
The Angular Module
The Template
The Template: Demo
Using setValue and patchValue
Simplifying with FormBuilder
Checklists and Summary

Validation
Introduction
Setting Built-in Validation Rules
Adjusting Validation Rules at Runtime
Custom Validators
Custom Validation with Parameters
Cross-Field Validation: Nested FormGroup
Cross-field Validation: Custom Validator
Checklists and Summary

Reacting to Changes
Introduction
Watching
Reacting: Adjusting Validation Rules
Reacting: Displaying Validation Messages
Reactive Transformations
Checklists and Summary

Dynamically Duplicate Input Elements
Introduction
Steps
Define the Input Element(s) to Duplicate
Define a FormGroup
Refactor
Create a FormArray
Loop Through the FormArray
Duplicate the Input Elements
Checklists and Summary

Reactive Forms in Context
Introduction
Sample Application
Sample Application: Architecture
Sample Application: Code
Routing to a Form
Reading a Route Parameter
Setting a canDeactivate Guard
Refactoring to a Custom Validation Class
Checklists and Summary

Create, Read, Update, and Delete (CRUD) Using HTTP
Introduction
Data Access Service
Data Access Service: Demo
Faking a Backend Server
Populating the Form with Data
Populating the Form with Data: Http Get
Populating the Form with Data: Subscribe
Saving Edits
Saving Edits: Demo
Creating New Items
Creating New Items: Demo
Deleting an Existing Item
Deleting an Existing Item: Demo
Checklists and Summary

Final Words
Introduction
Recapping Your Journey
Learning More
Closing

-----------------------------

---angular ngrx getting started

Introduction
Introduction
What Is NgRx?
Why Use NgRx?
Getting the Most from This Course
Sample Application
Course Outline

The Redux Pattern
Introduction
Store
Actions
Reducers
Advantages of the Redux Pattern
Checklists and Summary

First Look at NgRx
Introduction
Demo: Setting up the Sample Application
Installing the Store
Initializing the Store
Demo: Initializing the Store
Defining the State and Actions
Building a Reducer to Process Actions
Demo: Building a Reducer to Process Actions
Dispatching an Action to Change State
Subscribing to the Store to Get State Changes
Checklists and Summary

Developer Tools and Debugging
Introduction
Installing the Tools
Using the Tools
Checklists and Summary

Strongly Typing the State
Introduction
Defining Interfaces for Slices of State
Extending the State Interface for Lazy Loaded Features
Strongly Typing the State
Setting Initial State Values
Building Selectors
Demo: Building Selectors
Demo: Using Selectors
Composing Selectors
Checklists and Summary

Strongly Typing Actions with Action Creators
Introduction
Building Action Creators
Demo: Building Action Creators
Using Strongly Typed Actions
Demo: Using Strongly Typed Actions
Using Actions and Selectors for Component Communication
Demo: Communicating with the Edit Component
Defining Actions for Complex Operations
Demo: Defining Actions for Complex Operations
Checklists and Summary

Working with Effects
Introduction
What Are Effects?
Defining an Effect
Demo: Defining an Effect
SwitchMap Versus MergeMap
Registering an Effect
Using an Effect
Unsubscribing from Observables
Exception Handling in Effects
Checklists and Summary

Performing Update Operations
Introduction
Identifying the State and Actions
Strongly Typing the State and Building Selectors
Strongly Typing the Actions with Action Creators
Dispatching an Action
Building the Effect
Processing the Success and Fail Actions
Demo: Processing the Success and Fail Actions
Checklists and Summary

Architectural Considerations
Introduction
Folder by Feature or Function
Container Presentational Component Pattern
Demo: Container Component
Demo: Presentational Component
Change Detection OnPush
Creating a Barrel with Index.ts Files
Checklists and Summary

Final Words
Introduction
Recap
Additional NgRx Libraries
Learning More
Closing

-----------------------------

---angular http communication

Configuring an Application to Make HTTP Requests
Introduction and Overview
Demo: Book Tracker Project Overview
The Role of RxJS
Demo: Preparing to Use HttpClient in a Project
Consuming REST Services
Introduction and Overview
What is a REST Service?
Subscribing to Observables
Demo: Retrieving a Collection
Demo: Retrieving a Single Item
Using RxJS Operators
Demo: Transforming Data with RxJS
Demo: Creating, Updating, and Deleting Data
Summary

Advanced HTTP Requests and Error Handling
Introduction and Overview
Handling HTTP Errors
Demo: Handling HTTP Errors
Retrieving Data with Resolvers
Demo: Retrieving Data Over HTTP with Resolvers
Summary

Creating Interceptors
Introduction and Overview
What Are Interceptors?
Uses for Interceptors
Defining and Providing Interceptors
Demo: Creating an Interceptor
Demo: Intercepting Responses and Using Multiple Interceptors
Summary

Caching HTTP Requests with Interceptors
Introduction and Overview
Benefits and Types of Caching
Caching with Interceptors
Demo: Create a Service to Store Cached HTTP Requests
Demo: Create an Interceptor to Cache HTTP Requests
Summary

Testing HTTP Requests
Introduction and Overview
Angular's Default Unit Testing Tools
Structure of Angular HTTP Unit Tests
Demo: Testing HTTP Requests and Responses
Demo: Testing HTTP Errors
Summary

-----------------------------

---angular services

The Role Services Play in an Angular Application
Introduction
What Is an Angular Service?
Course Overview
Demo: Book Tracker Project Overview
Summary

Creating and Using Services
Introduction and Overview
Parts of a Service
Delivering Services to Components
Demo: Manually Creating a Logger Service
Demo: Creating a Service with the Angular CLI
Sharing Data with Services
Demo: Sharing Data with Service
Summary

Understanding and Configuring Dependency Injection
Introduction and Overview
What Is Dependency Injection?
Provider Tokens and Recipes
Demo: Multiple Ways to Provide Services
Injectors and Metadata
Hierarchical Injectors
Demo: Hierarchical Injectors
Deciding Where to Provide Services
Demo: Providing Feature Services
Demo: Creating a Core Module
Summary

Creating Asynchronous Services
Introduction and Overview
What Are Asynchronous Services?
Observables
Demo: Processing an Asynchronous HTTP Request with an Observable
Demo: Abstracting Away HTTP Errors
Promises
Demo: Asynchronously Executing a Task with a Promise
Understanding async/await
Demo: Handling a Promise with async/await
Summary

Consuming Common Built-in Services
Introduction and Overview
Demo: Finding and Using Built-in Services
Demo: Implementing a Centralized Error Handler
Summary

-----------------------------

---angular best practices

Getting Started with Angular
Introduction
Setting up Our Environment
Getting Started with the CLI
File Naming
Folder Structure
One Item per File
Summary

General Coding Best Practices
Introduction
The Single Responsibility Principle
Symbol Naming Best Practices
Using Immutability
Small Functions
Summary

Angular Module Organization
Introduction to Angular Module Organization
Creating a Core Module
Creating Shared Modules
Creating Feature Modules
Summary

Angular Components Best Practices
Introduction
Prefixing Component Selectors
Separating Component, CSS, and Template Files
Decorating Input and Output Properties
Delegating Complex Logic to Services
Component Member Sequence
Implementing Life Cycle Hook Interfaces
When to (and Not to) Create Components
Summary

Angular Services Best Practices
Introduction
Marking Services as Injectable
Using Services for Data Retrieval
Service Injector Best Practices
Summary

Performance Best Practices
Introduction
Ahead-of-time Compilation and the CLI
Lazy Loading Feature Modules
Monitoring Bundle Sizes
Improving Performance with OnPush Change Detection
Pure and Impure Pipe Performance
Summary

-----------------------------

---angular architecture and best practices

Introduction
Introduction
Prerequisites to Maximize Learning
Key Concepts and Learning Goals
Sample Application and Software Requirements
Course Overview

Planning the Application Architecture
Introduction
Architecture Considerations
Architecture Planning Template
Architecture Planning Template Example - Part 1
Architecture Planning Template Example - Part 2
The Angular Style Guide
Other Considerations
Summary

Organizing Features and Modules
Introduction
Organizing Features
Feature Modules
Core and Shared Modules
Core and Shared in Action
Creating a Custom Library
Consuming a Custom Library
Putting All the Modules Together
Summary

Structuring Components
Introduction
Container and Presentation Components
Container and Presentation Components in Action
Passing State with Input and Output Properties
Input and Output Properties in Action
Change Detection Strategies
Reference vs. Value Types
Cloning Techniques
Cloning in Action
Cloning with Immutable.js
Component Inheritance
Component Inheritance in Action
Summary

Component Communication
Introduction
Component Communication
Understanding RxJS Subjects
RxJS Subjects in Action - Part 1
RxJS Subjects in Action - Part 2
Creating an Event Bus Service
Using an Event Bus Service
Creating an Observable Service
Using an Observable Service
Unsubscribing from Observables
Summary

State Management
Introduction
The Need for State Management
State Management Options
Angular Services
NgRx
NgRx in Action
ngrx-data
ngrx-data in Action
Observable Store
Observable Store in Action
State Management Review
Summary

Additional Considerations
Introduction
Functions vs. Pipes
Functions and Pipes in Action
Using a Memo Decorator
HttpClient and RxJS Operators
Key Security Considerations
HTTP Interceptors
Summary

Course Summary
Course Summary

-----------------------------

---angular first look

Angular 2 in Action
Angular
What Can We Build?
Running the Samples

Angular 2 Architecture, What's New and What's Different
Angular 2: What's New and What's Different
Language Choices
Angular 1's Impact
Angular Modules
First Look at NgModules
Controllers to Components
First Look at Components
Structural Directives
First Look at Structural Directives
Data Binding
First Look at Data Binding
Less Built-in Directives
First Look at HTML Element Property and Event Binding
Services
Dependency Injection
First Look at Services and Dependency Injection
Your Skills Translate
Putting It all Together in Context of an App
Angular 2 Resources

Angular 2 Essentials: Components, Templates, Modules, and Metadata
Angular 2 Essentials
ES Modules
Angular Modules
Components
Defining a Component
Templates
Nested Components
Metadata
Examining the Component Decorator
Input and Output Decorators
Component Communication with Input and Output
Parent to Child Communication with ViewChild
Summary

Displaying Data: Data Binding, Directives, and Pipes
Displaying Data
Data Binding
Interpolation
Property Binding
Adding Property Binding
Event Binding
Adding Event Binding
Two-way Binding
Adding Two-way Binding
Built-in Directives
Adding Attribute and Structural Directives
Pipes
Exploring Template Syntax in Storyline Tracker
Summary

Services, Dependency Injection, and Lifecycle Hooks
Services, DI, and Lifecycle Hooks
Services
Refactoring for Services
Dependency Injection
Injectors
Changing Where the Services are Provided in Storyline Tracker
Component Lifecycle Hooks
Implementing Lifecycle Hooks and Their Interfaces
The Role of Lifecycle Hooks in Storyline Tracker
Summary

Routing and HTTP
Getting Data with Http
Http
Using Http in Angular 2
Adding Exception Handling for Http
RxJs
Async Pipe
Adding an Async Pipe with an Observable
Promises with Http and the Async Pipe
Http in the Storyline Tracker
Putting It All Together

Routing
Introducing Routing
Routing Essentials
Essential Routing Code
Adding the Routing Module to an App
Adding Routing to Templates
Sending and Receiving Route Parameters
Subscribing to Route Parameters
Basics of Route Resolvers
Route Resolver in the Storyline Tracker
Route Guards
Applying Route Guards
Child Routes
What's Next with Routing

Angular Modules
Types of Feature Modules
Eager Loading
Eagerly Loading Routed Modules
Lazy Loading
Lazily Loading Routed Modules
Defining Preload Strategies
Preload Strategies in the Storyline Tracker
Feature Module Types
Identifying Feature Modules
Feature Modules in the Storyline Tracker
Provider Tips
Wrap-up

-----------------------------

---Integrating Angular with Node.js RESTful Services

Course Introduction
Course Introduction
Pre-requisites to Maximize Learning
Learning Goals
Server-side Technologies and Concepts
Client-side Technologies and Concepts
Running the Application
Running the Application with Docker
Summary

Exploring the Node.js and Angular Application
Introduction
Exploring the Project Structure
Application Modules
Configuring Node.js Routes
Configuring the ES Module Loader
Angular Modules, Components, and Services
Summary

Retrieving Data Using a GET Action
Introduction
Creating a GET Action to Return Multiple Customers
Creating a GET Action to Return a Single Customer
Making GET Requests with an Angular Service
Displaying Customers in a Grid
Displaying a Customer in a Form
Converting to a 'Reactive' Form
Summary

Inserting Data Using a POST Action
Introduction
Creating a POST Action to Insert a Customer
Making a POST Request with an Angular Service
Modifying the Customer Form to Support Inserts
Exploring the 'Reactive' Form
Summary

Updating Data Using a PUT Action
Introduction
Creating a PUT Action to Update a Customer
Making a PUT Request with an Angular Service
Modifying the Customer Form to Support Updates
Exploring the 'Reactive' Form
Summary

Deleting Data Using a DELETE Action
Introduction
Creating a DELETE Action to DELETE a Customer
Making a DELETE Request with an Angular Service
Modifying the Customer Form to Support Deletes
Exploring the 'Reactive' Form
Summary

Data Paging, HTTP Headers, and CSRF
Introduction
Adding a Paging Header to a RESTful Service Response
Accessing Headers and Data in an Angular Service
Adding Paging Support to a Component
Adding a Paging Component
CSRF Overview
Adding CSRF Functionality with csurf
Using a csurf Token in an Angular Service
Summary

Course Summary

-----------------------------

---Structuring Angular Applications with Angular Libraries

Introduction
Introduction
Getting the Most out of This Course
Demo: Introducing the Sample App
Course Outline

Understanding the Problem of Growing Applications
Introduction
Architectural Blocks of an Angular Application
Placing Libraries in a Growing Codebase
Summary

Building a Typescript Library
Introduction Version
Setting up the Environment
Introduction to the Javascript Module System
Demo: Creating Your First Javascript Module
Short Comparison of Javscript Modules Systems
Demo: Implement First Typescript Module
Introduction Packages and NPM
Modules vs. Packages
Demo: Implement First Typescript Package
Summary

Creating and Using Your First Angular Library
Introduction
Requirements of a Library
Angular Package Format
Examine the ng-packagr
Understanding the Libs Entryfile
Demo: Create a Library with ng-packagr
Demo: Examine the Demo Application
Demo: Creating a Library with the Angular CLI
Demo: Extracting a Component into the Library
Demo: Extracting a Service into a Library
Demo: Passing Configuration into a Library
Demo: Using Dependency Injection to Switch the Libraries Service
Summary

Building, Packing, and Using the Library in Another Application
Introduction
Intoducing Lint and Test Commands
Demo: Linting an Angular Library
Demo: Testing Angular Libraries
Introducing Install, Link, and Pack Commands
Demo: Installing Libraries Locally with NPM Install
Demo: Using Angular Libraries with NPM Link
Demo: Using Angular Libraries with NPM Pack
Summary

Deploying the Library to NPM
Introduction
Dealing with Versions and Names of Packages
Demo: Versioning and Preparing the Libraries for Publishing
Demo: Publishing the Libraries to NPM
Demo: Installing and Using the Libraries
Summary

-----------------------------

---Angular Material

Introduction
Introduction
What We'll Be Building
Course Overview
References and Links

Material Design
Introduction
Key Principles
Summary

Getting Started
Overview and Tooling
Setting up Angular CLI
Installing Angular Material
Our First Material Components
Creating a Material Master Module
From CSS to SCSS
Summary

Layout Component
Our Goal
Flexbox Basics
Application Routes
Creating a Demo Module
Setting up the Routes
Flexbox Demo
Scaffolding the App
The Sidenav Component
Styling the Sidenav
Configuring the Sidenav
Adding Responsiveness
Creating a Toggle Button
Summary

Displaying Real Data
Our Goal
Introducing the Data Service
Feching Data
Navigation Lists
Loading SVG Avatars
Routing to Users
User Cards
Refactoring Routing Issues
Introducing Tabs
Summary

Using Data Tables
Our Goal
MatTable Features
Generating our Notes Component
Implementing the MatTable
Adding Pagination
Adding Filtering
Adding Header Sorting
Summary

Dialogs and Popups
Our Goal
Adding a Toolbar Menu
Dialog Basics
Creating our First Dialog
Scaffolding a Form
Customizing the Form
Adding Form Validation
Using the DatePicker
Saving the User
Snackbar Notifications
Summary

Wrapping Up
Understanding Themes
Creating Custom Themes
Toggling Themes
RTL and LTR Support
Final Words

-----------------------------

---Angular Component Communication

Introduction
Introduction
Get the Most from This Course
Sample Application
Course Outline

Communicating with a Template
Introduction
Binding and Structural Directives
Notifying the Component of User Changes
Two-way Binding, the Long Ways
Getters and Setters
Guidelines and Summary

ViewChild and ViewChildren
Introduction
ViewChild
Demo: ViewChild and Accessing the Native Html Element
ViewChildren
ViewChild and Angular Forms
Demo: ViewChild and Angular Forms
ViewChild and ngIf
Guidelines and Summary

Communicating with a Child Component
Introduction
Building Child Components
Parent to Child Communication
Input Property
Watching for Changes
Template Reference Variable
ViewChild Decorator
Guidelines and Summary

Communicating with a Parent Component
Introduction
Child to Parent
Output Property
Guidelines and Summary

Communicating Through a Service
Introduction
Managing State
Component to Itself
Property Bag Service
Component to Component
Service Scope and Lifetime
Guidelines and Summary

Communicating Through a State Management Service
Introduction
Sharing Entity State
State Management Service
Demo: Retrieving State
Demo: Maintaining State
Displaying Concurrent Components
Keeping State in Sync
Change Detection
Guidelines and Summary

Communicating Through Service Notifications
Introduction
Service Notifications
Subject
Demo: Subject
Demo: More on the Subject
Subject vs. BehaviorSubject
Angular Component Communication
Demo: Cleaning up a Subscription
Guidelines and Summary

Communicating Using the Router
Introduction
Routing Basics
Route Parameters
Guidelines and Summary

Final Words
Introduction
Recap
Learning More
Closing

-----------------------------

---RxJS in Angular: Reactive Development

Introduction
Introduction
What Is RxJS?
What Is Reactive Development?
Getting the Most from This Course
Course Outline

RxJS Terms and Syntax
Introduction
Observer/Subscriber
Observable Stream (Observable)
Starting the Observable Stream/Subscription
Stopping the Observable Stream
Creation Functions
Creation Functions: Demo
Summary and Checklists

RxJS Operators
Introduction
RxJS Operator Overview
RxJS Operator: map
RxJS Operator: tap
RxJS Operator: take
RxJS Operators: Demo
Operator Internals
Summary and Checklists

Going Reactive
Introduction
Sample Application
Working with the Async Pipe
Handling Errors
Handling Errors: Catch and Rethrow
Handling Errors: Demo
Improving Change Detection
Declarative Pattern for Data Retrieval
Summary and Checklists

Mapping Returned Data
Introduction
Mapping an Http Response
Mapping the Emitted Array
Mapping Array Elements
Transforming Array Elements
Summary and Checklists

Combining Streams
Introduction
Combination Operators/Functions
RxJS Creation Function: combineLatest
RxJS Creation Function: forkJoin
RxJS Operator: withLatestFrom
Combining Streams to Map an Id to a String
Combining Streams to Map an Id to a String: Demo
Summary and Checklists

Reacting to Actions
Introduction
Filtering a Stream
Filtering a Stream: Demo
Filtering a Stream: Demo II
Data Stream vs. Action Stream
Subject and BehaviorSubject
Reacting to Actions
Starting with an Initial Value
Summary and Checklists

Reacting to Actions: Examples
Introduction
Reacting to a Selection: Data Stream
Reacting to a Selection: Action Stream
Reacting to an Error
Reacting to an Add Operation
Reacting to an Add Operation: Demo
Summary and Checklists

Caching Observables
Introduction
Why Caching?
Patterns for Data Caching
Patterns for Data Caching: Demo
Summary and Considerations

Higher-order Mapping Operators
Introduction
Higher-order Mapping Operators
RxJS Operator: concatMap
concatMap: Demo
RxJS Operator: mergeMap
mergeMap: Demo
RxJS Operator: switchMap
switchMap: Demo
Summary and Checklists

Combining All the Streams
Introduction
Related Data Streams
Related Data Streams: Get It All
Related Data Streams: Just in Time
Just in Time: Demo
Get It All vs. Just in Time
Ancillary Streams
Combining All the Streams
Summary and Checklists

Final Words
Introduction
Recapping Our Journey
Key Points, Tips, and Common Issues
A Few More Terms
Learning More
Closing

-----------------------------

---

-----------------------------



-----------------------------



-----------------------------

